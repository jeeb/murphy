# Copyright (c) 2014, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

aal "murphy_websockets" {
    language "python" {
        from test_mrp_websockets import *
    }

    # preview-show-vars: connected, classes, resources, zones, set_acquired, set_locked, available_res_count
    # preview-depth: 10
    variables {
        connected, classes, resources, zones, \
        set_acquired, set_locked, available_res_count
    }

    initial_state {
        connected = False
        classes = None
        resources = None
        zones = None

        set_acquired = False
        set_locked = False
        available_res_count = 4
    }

    # When we have no connection, we can just connect
    input "connect" {
        guard { return not connected }
        body  { connected = True }
        adapter {
            connect()
        }
    }

    # Now we have a connection
    tag "connection available" {
        guard { return connected }

        input "disconnect" {
            body {
                connected = False

                classes = False
                resources = False
                zones = False

                set_acquired = False
                set_locked = False
                available_res_count = 4
            }
            adapter {
                disconnect()
            }
        }

        input "add_resource" {
            guard {
                return bool(available_res_count > 0 \
                            and resources)
            }
            body {
                available_res_count -= 1
            }
            adapter {
                add_resource(available_res_count)
            }
        }

        input "remove_resource" {
            guard {
                return bool(available_res_count < 4)
            }
            body {
                available_res_count += 1
            }
            adapter {
                remove_resource(available_res_count)
            }
        }

        input "list_classes" {
            guard { return not classes }
            body {
                classes = True
            }
            adapter {
                list_classes()
            }
        }

        input "list_resources" {
            guard { return not resources }
            body {
                resources = True
                available_res_count = 4
            }
            adapter {
                list_resources()
            }
        }

        input "list_zones" {
            guard { return not zones }
            body {
                zones = True
            }
            adapter {
                list_zones()
            }
        }
    }

    # Now we have resource objects that we can make a
    # set of
    tag "resource available" {
        guard { return available_res_count < 4 }

        input "build_res_set" {
            guard {
                return classes and \
                       zones
            }
            body {
                set_locked = True
            }
            adapter {
                build_set()
            }
        }
    }

    # Now we have a resource set available
    tag "set available" {
        guard { return set_locked }

        input "destroy_res_set" {
            body {
                set_locked = False
                set_acquired = False
            }
            adapter {
                destroy_set()
            }
        }

        input "acquire_set" {
            body {
                if not set_acquired:
                    set_acquired = True
            }
            adapter {
                acquire_set()
            }
        }

        input "release_set" {
            body {
                set_acquired = False
            }
            adapter {
                release_set()
            }
        }
    }

    adapter_exit {
        if connected:
            disconnect()
    }
}
