aal "noname" {
    language "python" {
        from mrp_resource_native import (Connection)
        from test_mrp_resource_native_helpers import (StatusObj,
                                                      py_status_callback,
                                                      py_res_callback,
                                                      py_grab_resource_set,
                                                      py_check_result)

        testing_string = "testing_testing"
        status = StatusObj()
        conn = Connection(py_status_callback, status)
        res_set = None
    }

    # preview-show-vars: conn_state, resource_state, change_type
    # preview-depth: 5
    variables {
        conn_state, resource_state, change_type
    }

    initial_state {
        conn_state = "disconnected"
        resource_state = "not gotten"
        change_type = "no change"
    }

    input "connect" {
        guard { return conn_state != "connected" }
        body  { conn_state = "connected" }
        adapter {
            global conn
            conn.connect()
        }
    }

    input "disconnect" {
        guard { return conn_state == "connected" and resource_state != "order issued" }
        body {
            conn_state = "disconnected"
            resource_state = "not gotten"
        }
        adapter {
            global conn
            conn.get_opaque_data().res_set_changed = False
            conn.disconnect()
        }
    }

    input "issue_resource_order" {
        guard { return conn and conn_state == "connected" and resource_state == "not gotten" }
        body {
            resource_state = "order issued"
        }
        adapter {
            global conn
            assert py_grab_resource_set(conn, py_res_callback)
        }
    }

    input "check_for_order_completion" {
        guard { return resource_state == "order issued" }
        body { resource_state = "gotten" }
        adapter {
            global conn
            while conn.iterate():
                print("Iterated: res_set_changed = %s" % (conn.get_opaque_data().res_set_changed))
                if conn.get_opaque_data().res_set_changed:
                    py_check_result(conn)
                    return
        }
    }

    tag "connected" {
        guard { conn_state == "connected" }
        adapter {
            global conn
            assert conn.get_state() == "connected"
        }
    }
}
