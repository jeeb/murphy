# Copyright (c) 2014, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

aal "noname" {
    language "python" {
        from mrp_resource_native import (Connection)
        from mrp_resource_native_helpers import (StatusObj,
                                                 py_status_callback,
                                                 py_res_callback,
                                                 py_grab_resource_set,
                                                 py_check_result,
                                                 py_modify_attribute)

        attr_name = "role"
        attr_val = "testing_testing"
        status = StatusObj()
        conn = Connection(py_status_callback, status)
        res_set = None
    }

    # preview-show-vars: conn_state, resource_state, change_type
    # preview-depth: 5
    variables {
        conn_state, resource_state, change_type
    }

    initial_state {
        conn_state = "disconnected"
        resource_state = "not gotten"
        change_type = "no change"
    }

    input "connect" {
        guard { return conn_state != "connected" }
        body  { conn_state = "connected" }
        adapter {
            global conn
            conn.connect()
        }
    }

    input "disconnect" {
        guard { return conn_state == "connected" and resource_state != "order issued" }
        body {
            conn_state = "disconnected"
            resource_state = "not gotten"
        }
        adapter {
            global conn
            conn.get_opaque_data().res_set_changed = False

            if conn.get_opaque_data().res_set:
                conn.get_opaque_data().res_set.delete()
                conn.get_opaque_data().res_set = None

            conn.disconnect()
            print("We disconnect")
            print("")
        }
    }

    input "issue_resource_order" {
        guard { return conn_state == "connected" and resource_state == "not gotten" }
        body {
            resource_state = "order issued"
            change_type = "resource"
        }
        adapter {
            global conn
            assert py_grab_resource_set(conn, py_res_callback)
        }
    }

    input "issue_attribute_order" {
        guard { return conn_state == "connected" and resource_state == "not gotten" or resource_state == "gotten" }
        body {
            resource_state = "order issued"
            change_type = "attribute"
        }
        adapter {
            global conn
            assert py_modify_attribute(conn, py_res_callback, attr_name, attr_val)
        }
    }

    input "check_for_order_completion" {
        guard { return resource_state == "order issued" }
        body { resource_state = "gotten" }
        adapter {
            global conn
            if conn.get_opaque_data().res_set.get_state() == "acquired":
                return

            while conn.iterate():
                print("Iterated: res_set_changed = %s" % (conn.get_opaque_data().res_set_changed))
                if conn.get_opaque_data().res_set_changed:
                    py_check_result(conn)
                    return
        }
    }

    tag "connected" {
        guard { conn_state == "connected" }
        adapter {
            global conn
            assert conn.get_state() == "connected"
        }
    }
}
